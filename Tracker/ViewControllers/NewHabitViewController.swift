import UIKit

protocol NewHabitViewControllerDelegate: AnyObject {
    func didCreateTracker(_ tracker: Tracker, categoryTitle: String)
}

final class NewHabitViewController: UIViewController {
    
    weak var delegate: NewHabitViewControllerDelegate?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        view.backgroundColor = .white
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ view
        view.addSubview(nameTextField)
        view.addSubview(buttonsTableView)
        view.addSubview(cancelButton)
        view.addSubview(createButton)
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã
        NSLayoutConstraint.activate([
            // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
            nameTextField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 24),
            nameTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            nameTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            nameTextField.heightAnchor.constraint(equalToConstant: 75),
            
            // "–¢–∞–±–ª–∏—Ü–∞" —Å –∫–Ω–æ–ø–∫–∞–º–∏
            buttonsTableView.topAnchor.constraint(equalTo: nameTextField.bottomAnchor, constant: 24),
            buttonsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            buttonsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            buttonsTableView.heightAnchor.constraint(equalToConstant: 150), // 2 —è—á–µ–π–∫–∏ –ø–æ 75
            
            // –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∏—Ç—å
            cancelButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            cancelButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: 0),
            cancelButton.heightAnchor.constraint(equalToConstant: 60),
            cancelButton.trailingAnchor.constraint(equalTo: createButton.leadingAnchor, constant: -8),
            
            // –ö–Ω–æ–ø–∫–∞ –°–æ–∑–¥–∞—Ç—å
            createButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            createButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: 0),
            createButton.heightAnchor.constraint(equalToConstant: 60),
            createButton.widthAnchor.constraint(equalTo: cancelButton.widthAnchor)
        ])
        
        buttonsTableView.dataSource = self
        buttonsTableView.delegate = self
        
        nameTextField.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged)
        nameTextField.delegate = self
    }
    
    private var schedule: Set<DayOfWeek> = []
    
    @objc private func cancelButtonTapped() {
        dismiss(animated: true)
    }
    
    @objc private func createButtonTapped() {
        // 1. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π
        guard let name = nameTextField.text, !name.isEmpty else {
            // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç, —á—Ç–æ –∏–º—è –Ω–µ –≤–≤–µ–¥–µ–Ω–æ
            return
        }
        
        // –ü–æ–∫–∞ —É –Ω–∞—Å –Ω–µ—Ç UI –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let color = UIColor.systemBlue
        let emoji = "üëç"
        
        // 2. –°–æ–∑–¥–∞–µ–º –Ω–∞—à –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä
        let newTracker = Tracker(
            id: UUID(),
            name: name,
            color: color,
            emoji: emoji,
            schedule: self.schedule // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç —ç–∫—Ä–∞–Ω–∞ Schedule
        )
        
        // 3. –í—ã–∑—ã–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É –¥–∞–Ω–Ω—ã–µ
        // –ö–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∫–∞ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        delegate?.didCreateTracker(newTracker, categoryTitle: "–í–∞–∂–Ω–æ–µ")
        
        // 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è
        dismiss(animated: true)
    }
    
    @objc private func textFieldDidChange() {
        updateCreateButtonState()
    }
    
    private func updateCreateButtonState() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–π –ò —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if let text = nameTextField.text, !text.isEmpty, !schedule.isEmpty {
            // –ï—Å–ª–∏ –æ–±–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π
            createButton.isEnabled = true
            createButton.backgroundColor = .black
        } else {
            // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
            createButton.isEnabled = false
            createButton.backgroundColor = .gray
        }
    }
    
    // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    private lazy var nameTextField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        textField.backgroundColor = UIColor(red: 0.9, green: 0.91, blue: 0.92, alpha: 0.3)
        textField.layer.cornerRadius = 16
        textField.translatesAutoresizingMaskIntoConstraints = false
        // –î–æ–±–∞–≤–∏–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–ª–µ–≤–∞
        let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 16, height: textField.frame.height))
        textField.leftView = paddingView
        textField.leftViewMode = .always
        return textField
    }()
    
    // "–¢–∞–±–ª–∏—Ü–∞" –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    private lazy var buttonsTableView: UITableView = {
        let tableView = UITableView()
        tableView.layer.cornerRadius = 16
        tableView.separatorInset = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        return tableView
    }()
    
    // –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∏—Ç—å
    private lazy var cancelButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        button.setTitleColor(UIColor.red, for: .normal)
        button.layer.borderColor = UIColor.red.cgColor
        button.layer.borderWidth = 1
        button.layer.cornerRadius = 16
        button.addTarget(self, action: #selector(cancelButtonTapped), for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    // –ö–Ω–æ–ø–∫–∞ –°–æ–∑–¥–∞—Ç—å
    private lazy var createButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–°–æ–∑–¥–∞—Ç—å", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .medium)
        button.setTitleColor(.white, for: .normal)
        button.backgroundColor = .gray
        button.layer.cornerRadius = 16
        button.addTarget(self, action: #selector(createButtonTapped), for: .touchUpInside)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.isEnabled = false
        return button
    }()
}

extension NewHabitViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        2 // –£ –Ω–∞—Å –¥–≤–µ "–∫–Ω–æ–ø–∫–∏": –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        cell.textLabel?.text = indexPath.row == 0 ? "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" : "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        cell.accessoryType = .disclosureIndicator // –°—Ç—Ä–µ–ª–æ—á–∫–∞ —Å–ø—Ä–∞–≤–∞
        cell.backgroundColor = UIColor(red: 0.9, green: 0.91, blue: 0.92, alpha: 0.3)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true) // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        
        guard indexPath.row == 1 else { return }
        
        let scheduleViewController = ScheduleViewController()
        scheduleViewController.delegate = self
        navigationController?.pushViewController(scheduleViewController, animated: true)
    }
}

extension NewHabitViewController: ScheduleViewControllerDelegate {
    func didConfirm(_ schedule: Set<DayOfWeek>) {
        self.schedule = schedule
        updateCreateButtonState()
    }
}

extension NewHabitViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}
