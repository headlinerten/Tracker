import UIKit

class TrackersViewController: UIViewController {
    
    private var visibleCategories: [TrackerCategory] = []
    private var categories: [TrackerCategory] = []
    private var completedTrackers: [TrackerRecord] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–¢—Ä–µ–∫–µ—Ä—ã"
        title = "–¢—Ä–µ–∫–µ—Ä—ã"
        navigationController?.navigationBar.prefersLargeTitles = true
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "+"
        let addButton = UIBarButtonItem(
            image: UIImage(systemName: "plus"),
            style: .plain,
            target: self,
            action: #selector(addButtonTapped)
        )
        addButton.tintColor = .black
        navigationItem.leftBarButtonItem = addButton
        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: datePicker)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥ –≤–∫–ª–∞–¥–∫–∏
        tabBarItem = UITabBarItem(
            title: "–¢—Ä–µ–∫–µ—Ä—ã",
            image: UIImage(systemName: "record.circle.fill"),
            selectedImage: nil
        )
        
        view.addSubview(collectionView)

        NSLayoutConstraint.activate([
            // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–µ—Ä—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫ –Ω–∏–∑—É navigationBar
            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            
            // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –Ω–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫ –≤–µ—Ä—Ö—É tabBar
            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫—Ä–∞—è –∫ –∫—Ä–∞—è–º view
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
        
        collectionView.register(TrackerCell.self, forCellWithReuseIdentifier: TrackerCell.identifier)
        
        view.addSubview(placeholderView)

        NSLayoutConstraint.activate([
            placeholderView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            placeholderView.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
        
        placeholderView.isHidden = true
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–µ—Ä–æ–≤-–ø—Ä–∏–≤—ã—á–µ–∫
        let tracker1 = Tracker(
            id: UUID(),
            name: "–ü–æ–ª–∏–≤–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è",
            color: .systemGreen,
            emoji: "ü™¥",
            schedule: [.wednesday, .friday]
        )

        let tracker2 = Tracker(
            id: UUID(),
            name: "–ß–∏—Ç–∞—Ç—å –ø–æ 15 –º–∏–Ω—É—Ç",
            color: .systemBlue,
            emoji: "üìö",
            schedule: [.monday, .tuesday, .wednesday, .thursday, .friday]
        )

        let tracker3 = Tracker(
            id: UUID(),
            name: "–°—Ö–æ–¥–∏—Ç—å –≤ –∑–∞–ª",
            color: .systemOrange,
            emoji: "üí™",
            schedule: [.tuesday, .thursday, .saturday]
        )

        // –°–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let homeCategory = TrackerCategory(
            title: "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞",
            trackers: [tracker1]
        )

        let selfCareCategory = TrackerCategory(
            title: "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ",
            trackers: [tracker2, tracker3]
        )

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—à –º–∞—Å—Å–∏–≤-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —ç—Ç–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        self.categories = [homeCategory, selfCareCategory]
        
        collectionView.dataSource = self
        collectionView.delegate = self
        
        collectionView.register(
            TrackerCategoryHeader.self,
            forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
            withReuseIdentifier: TrackerCategoryHeader.identifier
        )
        
        datePickerValueChanged()
    }
    
    @objc private func addButtonTapped() {
        // 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        let newHabitViewController = NewHabitViewController()
        
        newHabitViewController.delegate = self

        // 2. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π UINavigationController
        let navigationController = UINavigationController(rootViewController: newHabitViewController)

        // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω –º–æ–¥–∞–ª—å–Ω–æ
        present(navigationController, animated: true)
    }
    
    @objc
    private func datePickerValueChanged() {
        let selectedDate = datePicker.date
        let calendar = Calendar.current
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (1 - –í—Å, 2 - –ü–Ω, ..., 7 - –°–±)
        let weekDay = calendar.component(.weekday, from: selectedDate)
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        visibleCategories = categories.compactMap { category in
            let trackers = category.trackers.filter { tracker in
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–µ–∫–µ—Ä–∞
                // –¢—É—Ç –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–±–æ–ª—å—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                return tracker.schedule.contains(convertWeekday(weekDay))
            }
            
            if trackers.isEmpty {
                return nil
            }
            
            return TrackerCategory(
                title: category.title,
                trackers: trackers
            )
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        collectionView.reloadData()
        placeholderView.isHidden = !visibleCategories.isEmpty
    }

    private func convertWeekday(_ weekday: Int) -> DayOfWeek {
        switch weekday {
        case 1: return .sunday
        case 2: return .monday
        case 3: return .tuesday
        case 4: return .wednesday
        case 5: return .thursday
        case 6: return .friday
        default: return .saturday
        }
    }
    
    private lazy var datePicker: UIDatePicker = {
        let picker = UIDatePicker()
        picker.datePickerMode = .date
        picker.preferredDatePickerStyle = .compact
        picker.locale = Locale(identifier: "ru_RU")
        picker.addTarget(self, action: #selector(datePickerValueChanged), for: .valueChanged)
        return picker
    }()
    
    private lazy var dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yy"
        return formatter
    }()
    
    private lazy var collectionView: UICollectionView = {
        // –°–æ–∑–¥–∞–µ–º "—á–µ—Ä—Ç–µ–∂" (layout) –¥–ª—è –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        let layout = UICollectionViewFlowLayout()
        
        // –°–æ–∑–¥–∞–µ–º —Å–∞–º—É –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —ç—Ç–∏–º "—á–µ—Ä—Ç–µ–∂–æ–º"
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –æ—Ç–ª–∏—á–∞–ª—Å—è –æ—Ç —Ñ–æ–Ω–∞ –≤—å—é
        collectionView.backgroundColor = .white
        
        return collectionView
    }()
    
    private lazy var placeholderView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        let imageView = UIImageView(image: UIImage(named: "star"))
        imageView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(imageView)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        let label = UILabel()
        label.text = "–ß—Ç–æ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?"
        label.font = .systemFont(ofSize: 12, weight: .medium)
        label.textColor = .black
        label.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(label)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ placeholderView
        NSLayoutConstraint.activate([
            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            
            label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor)
        ])
        
        return view
    }()
}

extension TrackersViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return visibleCategories.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return visibleCategories[section].trackers.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrackerCell.identifier, for: indexPath) as? TrackerCell else {
            return UICollectionViewCell()
        }
        
        let tracker = visibleCategories[indexPath.section].trackers[indexPath.row]
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–µ–ª–µ–≥–∞—Ç–æ–º —è—á–µ–π–∫–∏
        cell.delegate = self
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ —Ç—Ä–µ–∫–µ—Ä —Å–µ–≥–æ–¥–Ω—è
        let isCompleted = completedTrackers.contains { $0.trackerId == tracker.id && isSameDay($0.date, datePicker.date) }
        // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å–µ–≥–æ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç—Ä–µ–∫–µ—Ä
        let completedDays = completedTrackers.filter { $0.trackerId == tracker.id }.count
        
        cell.configure(
            with: tracker,
            isCompleted: isCompleted,
            days: completedDays,
            indexPath: indexPath
        )
    
        return cell
    }

    private func isSameDay(_ date1: Date, _ date2: Date) -> Bool {
        return Calendar.current.isDate(date1, inSameDayAs: date2)
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        guard
            kind == UICollectionView.elementKindSectionHeader,
            let view = collectionView.dequeueReusableSupplementaryView(
                ofKind: kind,
                withReuseIdentifier: TrackerCategoryHeader.identifier,
                for: indexPath
            ) as? TrackerCategoryHeader
        else {
            return UICollectionReusableView()
        }

        view.titleLabel.text = visibleCategories[indexPath.section].title
        return view
    }
}

extension TrackersViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        // –ó–∞–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Ä—è–¥—É
        let cellsPerRow: CGFloat = 2
        // –ó–∞–¥–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        let leftInset: CGFloat = 16
        let rightInset: CGFloat = 16
        let cellSpacing: CGFloat = 9

        // –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É
        let paddingWidth = leftInset + rightInset + (cellsPerRow - 1) * cellSpacing
        let availableWidth = collectionView.frame.width - paddingWidth

        // –°—á–∏—Ç–∞–µ–º —à–∏—Ä–∏–Ω—É —è—á–µ–π–∫–∏
        let cellWidth = availableWidth / cellsPerRow

        return CGSize(width: cellWidth, height: 148)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 9 // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 16 // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.bounds.width, height: 30)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 16, left: 16, bottom: 24, right: 16)
    }
}

extension TrackersViewController: TrackerCellDelegate {
    func completeTracker(id: UUID, at indexPath: IndexPath) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        let currentDate = Date()
        let selectedDate = datePicker.date
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—Ç—ã, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        if Calendar.current.compare(selectedDate, to: currentDate, toGranularity: .day) == .orderedDescending {
            print("–ù–µ–ª—å–∑—è –æ—Ç–º–µ—á–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç!")
            return // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        }

        // 2. –ò—â–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ completedTrackers
        if let index = completedTrackers.firstIndex(where: { $0.trackerId == id && isSameDay($0.date, selectedDate) }) {
            // 3. –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —É–¥–∞–ª—è–µ–º –µ–µ (—Å–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É)
            completedTrackers.remove(at: index)
        } else {
            // 4. –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ (–æ—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
            let newRecord = TrackerRecord(trackerId: id, date: selectedDate)
            completedTrackers.append(newRecord)
        }

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —è—á–µ–π–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏
        collectionView.reloadItems(at: [indexPath])
    }
}

extension TrackersViewController: NewHabitViewControllerDelegate {
    func didCreateTracker(_ tracker: Tracker, categoryTitle: String) {
        var updatedCategories = categories
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        if let categoryIndex = updatedCategories.firstIndex(where: { $0.title == categoryTitle }) {
            // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –≤ –µ–µ –º–∞—Å—Å–∏–≤
            var updatedTrackers = updatedCategories[categoryIndex].trackers
            updatedTrackers.append(tracker)
            updatedCategories[categoryIndex] = TrackerCategory(title: categoryTitle, trackers: updatedTrackers)
        } else {
            // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å —ç—Ç–∏–º —Ç—Ä–µ–∫–µ—Ä–æ–º
            let newCategory = TrackerCategory(title: categoryTitle, trackers: [tracker])
            updatedCategories.append(newCategory)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.categories = updatedCategories
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä,
        // –µ—Å–ª–∏ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é
        datePickerValueChanged()
    }
}
